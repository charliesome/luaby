%% name = Luaby::Parser
#%

- = Whitespace
  | Comment

Whitespace = /\s*/ -

Comment = "--" (/[^\n]/) -
        | "--[[" (/.*?\]\]--/) -

StringCharacter = "\\a" { "\a" }
                | "\\b" { "\b" }
                | "\\f" { "\f" }
                | "\\n" { "\n" }
                | "\\r" { "\r" }
                | "\\t" { "\t" }
                | "\\v" { "\v" }
                | "\\x" <(/[A-Fa-f0-9]{2}/)> { text.to_i(16).chr }
                | "\\\\" { "\\" }
                | "\\\n" { "\n" }
                | "\\\r" { "\n" }
                | "\\z" " "* { nil }
                | "\\" <(/[0-9]{1,3}/)> { text.to_i(10).chr }
                | <(/[^'"\\]/)> { text }

DoubleQuotedStringCharacter = <StringCharacter> { text }
                            | "'" { text }

SingleQuotedStringCharacter = <StringCharacter> { text }
                            | "\"" { text }

String = "\"" <DoubleQuotedStringCharacter*:str> "\"" - { str }
       | "'"  <SingleQuotedStringCharacter*:str> "'"  - { str }

Do          = "do" -
End         = "end" -
While       = "while" -
Repeat      = "repeat" -
Until       = "until" -
If          = "if" -
Then        = "then" -
Else        = "else" -
Elsif       = "elsif" -
Equals      = "=" -
Function    = "function" -
Break       = "break" -
Return      = "return" -
Goto        = "goto" -
Comma       = "," -
Semicolon   = ";" -
DoubleColon = "::" -

Name = /[a-zA-Z_][a-zA-Z_0-9]*/ -

string_literal = <String:str> { Luaby::AST::StringLiteral.new str.compact.join }

var = <Name> { Luaby::AST::Variable.new text }

stat_semi = <stat> ";"? { text }

chunk = stat_semi*:stats (laststat:laststat)?       { Luaby::AST::Block.new(laststat ? [*stats, laststat] : stats) }

block = chunk

retstat = Return explist:explist Semicolon?         { Luaby::AST::Return.new explist }

stat  = Semicolon                                   { nil }
      | varlist:lvals Equals explist:rvals          { Luaby::AST::Assignment.new lvals, rvals }
      | functioncall                                { @TODO }
      | DoubleColon Name:name DoubleColon           { Luaby::AST::Label.new name }
      | Break                                       { Luaby::AST::Break.new }
      | Goto Name:name                              { Luaby::AST::Goto.new name }
      | Do block:block End                          { Luaby::AST::Block.new block }
      | While exp:exp Do block:block End            { Luaby::AST::While.new exp, block }
      | Repeat block:block Until exp:exp            { Luaby::AST::Repeat.new block, exp }
      | If exp:exp Then block:block End             { Luaby::AST::If.new exp, block }
      | For var:var Equals exp:from Comma exp:to Do block:block End { Luaby::AST::ForFromTo.new var, from, to, block }
      | For var:var Equals exp:from Comma exp:to Comma exp:step Do block:block End { Luaby::AST::ForFromToStep.new var, from, to, step, block }
      | For namelist:namelist In explist:explist Do block:block End { Luaby::AST::ForIn.new namelist, explist, block }
      | Local Function Name:name funcbody:body      { Luaby::AST::LocalFunction.new name, body }
      | Function funcname:name funcbody:body        { Luaby::AST::Function.new name, body }
      | Local namelist:names Equals explist:exps    { Luaby::AST::LocalAssignment.new names, exps }
      | Local namelist:namelist                     { Luaby::AST::LocalDeclaration.new namelist }
      
funcname = Name 

root = -
     | - <string_literal:str> /\Z/ { str }